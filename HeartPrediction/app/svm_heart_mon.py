# -*- coding: utf-8 -*-
"""SVM_heart_mon.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1KBGb5Gvznl3RYxZuR0Jzn1l8jfAXMTB4

https://www.kaggle.com/code/microvision/heart-disease-exploratory-data-analysis/notebook
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
sns.set(style='darkgrid')
import plotly.graph_objs as go
import plotly.offline as py
from sklearn.model_selection import train_test_split
from sklearn.neighbors import KNeighborsClassifier
from sklearn.svm import SVC  
from sklearn import metrics

df = pd.read_csv('https://raw.githubusercontent.com/OliMations/uoeHeartDiseasePrediction/main/heart.csv')
df

df.describe()

"""age -> Age
sex -> Sex
cp -> Chest_pain_type
trestbps -> Resting_bp
chol -> Cholesterol
fbs -> Fasting_bs
restecg -> Resting_ecg
thalach -> Max_heart_rate
exang -> Exercise_induced_angina
oldpeak -> ST_depression
slope -> ST_slope
ca -> Num_major_vessels
thal -> Thallium_test
target -> Condition
"""

df.columns = ['Age', 'Sex', 'Chest_pain_type', 'Resting_bp', 
              'Cholesterol', 'Fasting_bs', 'Resting_ecg', 
              'Max_heart_rate', 'Exercise_induced_angina', 
              'ST_depression', 'ST_slope', 'Num_major_vessels',
              'Thallium_test', 'Condition']
df.head(10)

df.shape

results = df['Condition'].value_counts()
values = [results[0], results[1]]
labels = ['Benign', 'Malignant']
colors = ['Red', 'Blue']
    
fig_pie = go.Pie(labels=labels, values=values,
                     marker={'colors': colors, 
                             'line': {'color': 'Black', 'width': 2}})
py.iplot([fig_pie])

plt.figure(figsize=(11, 7))
sns.heatmap(df.corr(), annot=True, linewidth=0.2, 
          fmt='.2f', cmap='RdGy_r')
plt.title('Correlations between Features', fontsize=15)
plt.show()

X = X = df[['Age', 'Sex', 'Chest_pain_type', 'Resting_bp', 
              'Cholesterol', 'Fasting_bs', 'Resting_ecg', 
              'Max_heart_rate', 'Exercise_induced_angina', 
              'ST_depression', 'ST_slope', 'Num_major_vessels',
              'Thallium_test']]
y = df.Condition

X_train, X_test, y_train,  y_test = train_test_split(X, y, test_size=0.33, random_state=42)

X_train.shape

clf = SVC(kernel='linear') 
  
# fitting x samples and y classes 
clf.fit(X_train, y_train)

y_pred = clf.predict(X_test)
print(f"Accuracy: {metrics.accuracy_score(y_test, y_pred)*100}")
# xg boost try